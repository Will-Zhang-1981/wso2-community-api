/*
 * Created on 23 dec 2015 (Time 08:53:38)
 * Generated by Telosys Tools Generator (version 2.1.1)
 */
package org.vasttrafik.wso2.carbon.community.api.dao.impl.jdbc;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.vasttrafik.wso2.carbon.community.api.dao.MessageDAO;
import org.vasttrafik.wso2.carbon.community.api.dao.impl.jdbc.commons.GenericDAO;
import org.vasttrafik.wso2.carbon.community.api.model.MessageDTO;

/**
 * MessageDTO DAO implementation 
 * 
 * @author Lars Andersson
 *
 */
public final class MessageDAOImpl extends GenericDAO<MessageDTO> implements MessageDAO {

	private final static String SQL_SELECT = 
		"select com_id, com_original_id, com_subject, com_body, com_sender_id, com_created_date, com_enable_html from com_message where com_id = ?";

	private final static String SQL_INSERT = 
		"insert into com_message (com_original_id, com_subject, com_body, com_sender_id, com_enable_html) values (?, ?, ?, ?, ?)";

	private final static String SQL_UPDATE = 
		"update com_message set com_subject = ?, com_body = ?, com_sender_id = ?, com_enable_html = ? where com_id = ?";

	private final static String SQL_DELETE = 
		"delete from com_message where com_id = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from com_message";

	private final static String SQL_COUNT = 
		"select count(*) from com_message where com_id = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public MessageDAOImpl() {
		super();
	}

	//----------------------------------------------------------------------
	/**
	 * Creates a new instance of the bean and populates it with the given primary value(s)
	 * @param id;
	 * @return the new instance
	 */
	private MessageDTO newInstanceWithPrimaryKey(Integer id) {
		MessageDTO messageDTO = new MessageDTO();
		messageDTO.setId(id);
		return messageDTO ;
	}

	//----------------------------------------------------------------------
	/**
	 * Finds a bean by its primary key 
	 * @param id;
	 * @return the bean found or null if not found 
	 */
	@Override
	public MessageDTO find(Integer id) throws SQLException {
		MessageDTO messageDTO = newInstanceWithPrimaryKey(id) ;
		if (super.doSelect(messageDTO)) {
			return messageDTO ;
		}
		else {
			return null ; // Not found
		}
	}
	//----------------------------------------------------------------------
	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s) in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from the database<br>
	 * If not found, the given instance remains unchanged
	 * @param messageDTO
	 * @return true if found, false if not found
	 */
	@Override
	public boolean load(MessageDTO messageDTO) throws SQLException {
		return super.doSelect(messageDTO) ;
	}
    //----------------------------------------------------------------------
	/**
	 * Inserts the given bean in the database 
	 * @param messageDTO
	 */
	@Override
	public Integer insert(MessageDTO messageDTO) throws SQLException {
		Long key = super.doInsertAutoIncr(messageDTO);
		return key.intValue();
	}

    //----------------------------------------------------------------------
	/**
	 * Updates the given bean in the database 
	 * @param messageDTO
	 * @return
	 */
	@Override
	public int update(MessageDTO messageDTO) throws SQLException {
		return super.doUpdate(messageDTO);
	}	

    //----------------------------------------------------------------------
	/**
	 * Deletes the record in the database using the given primary key value(s) 
	 * @param id;
	 * @return
	 */
	@Override
	public int delete(Integer id) throws SQLException {
		MessageDTO messageDTO = newInstanceWithPrimaryKey(id) ;
		return super.doDelete(messageDTO);
	}

    //----------------------------------------------------------------------
	/**
	 * Deletes the given bean in the database 
	 * @param messageDTO
	 * @return
	 */
	@Override
	public int delete(MessageDTO messageDTO) throws SQLException {
		return super.doDelete(messageDTO);
	}

    //----------------------------------------------------------------------
	/**
	 * Checks the existence of a record in the database using the given primary key value(s)
	 * @param id;
	 * @return
	 */
	@Override
	public boolean exists(Integer id) throws SQLException {
		MessageDTO messageDTO = newInstanceWithPrimaryKey(id) ;
		return super.doExists(messageDTO);
	}
    //----------------------------------------------------------------------
	/**
	 * Checks the existence of the given bean in the database 
	 * @param messageDTO
	 * @return
	 */
	@Override
	public boolean exists(MessageDTO messageDTO) throws SQLException {
		return super.doExists(messageDTO);
	}

    //----------------------------------------------------------------------
	/**
	 * Counts all the records present in the database
	 * @return
	 */
	@Override
	public long count() throws SQLException {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForPrimaryKey(PreparedStatement ps, int i, MessageDTO messageDTO) throws SQLException {
		//--- Set PRIMARY KEY from bean to PreparedStatement (SQL "WHERE key=?, ...")
		setValue(ps, i++, messageDTO.getId()) ; // "com_id" : java.lang.Integer
	}

    //----------------------------------------------------------------------
	@Override
	protected MessageDTO populateBean(ResultSet rs, MessageDTO messageDTO) throws SQLException {
		//--- Set data from ResultSet to Bean attributes
		messageDTO.setId(rs.getInt("com_id")); 						// java.lang.Integer
		if (rs.wasNull()) { messageDTO.setId(null); }; 				// not primitive number => keep null value if any
		messageDTO.setOriginalId(rs.getInt("com_original_id")); 	// java.lang.Integer
		if (rs.wasNull()) { messageDTO.setOriginalId(null); }; 		// not primitive number => keep null value if any
		messageDTO.setSubject(rs.getString("com_subject")); 		// java.lang.String
		messageDTO.setBody(rs.getString("com_body")); 				// java.lang.String
		messageDTO.setSenderId(rs.getInt("com_sender_id")); 		// java.lang.Integer
		if (rs.wasNull()) { messageDTO.setSenderId(null); }; 		// not primitive number => keep null value if any
		messageDTO.setCreateDate(rs.getDate("com_created_date")); 	// java.util.Date
		messageDTO.setEnableHtml(rs.getBoolean("com_enable_html")); // java.lang.Boolean
		if (rs.wasNull()) { messageDTO.setEnableHtml(null); }; 		// not primitive number => keep null value if any
		return messageDTO ;
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForInsert(PreparedStatement ps, int i, MessageDTO messageDTO) throws SQLException {
		//--- Set PRIMARY KEY and DATA from bean to PreparedStatement (SQL "SET x=?, y=?, ...")
		// "com_id" is auto-incremented => no set in insert	
		setValue(ps, i++, messageDTO.getOriginalId()) ; 			// "com_original_id" : java.lang.Integer
		setValue(ps, i++, messageDTO.getSubject()) ; 				// "com_subject" : java.lang.String
		setValue(ps, i++, messageDTO.getBody()) ; 					// "com_body" : java.lang.String
		setValue(ps, i++, messageDTO.getSenderId()) ; 				// "com_sender_id" : java.lang.Integer
		//setValue(ps, i++, messageDTO.getCreateDate()) ; 			// "com_create_date" : java.util.Date
		setValue(ps, i++, messageDTO.getEnableHtml()) ; 			// "com_enable_html" : java.lang.Byte
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForUpdate(PreparedStatement ps, int i, MessageDTO messageDTO) throws SQLException {
		//--- Set DATA from bean to PreparedStatement (SQL "SET x=?, y=?, ...")
		setValue(ps, i++, messageDTO.getSubject()) ; 				// "com_subject" : java.lang.String
		setValue(ps, i++, messageDTO.getBody()) ; 					// "com_body" : java.lang.String
		setValue(ps, i++, messageDTO.getSenderId()) ; 				// "com_sender_id" : java.lang.Integer
		//setValue(ps, i++, messageDTO.getCreateDate()) ; 			// "com_create_date" : java.util.Date
		setValue(ps, i++, messageDTO.getEnableHtml()) ; 			// "com_enable_html" : java.lang.Byte
		//--- Set PRIMARY KEY from bean to PreparedStatement (SQL "WHERE key=?, ...")
		setValue(ps, i++, messageDTO.getId()) ; 					// "com_id" : java.lang.Integer
	}

}
